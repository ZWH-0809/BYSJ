* Checking out Lang-43 to /scratch/acp13jcd/run_gzoltar_16875_Lang-43
* Compiling Lang-43
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
* Running GZoltar
   ____ _____     _ _               
  / ___|__  /___ | | |_ __ _ _ __   
 | |  _  / // _ \| | __/ _` | '__| 
 | |_| |/ /| (_) | | || (_| | |     
  \____/____\___/|_|\__\__,_|_| 

* Preparing classpath
* Collecting classes under test
* Collecting test cases
* Performing analysis
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testBuiltInDateTimeFormat
* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testBuiltInDateTimeFormat
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testOverriddenBuiltinFormat
* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testOverriddenBuiltinFormat
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testBuiltInChoiceFormat
* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testBuiltInChoiceFormat
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testEscapedQuote_LANG_477
* Failure: Java heap space | testEscapedQuote_LANG_477(org.apache.commons.lang.text.ExtendedMessageFormatTest)
java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2367)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:130)
	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:114)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:587)
	at java.lang.StringBuffer.append(StringBuffer.java:332)
	at org.apache.commons.lang.text.ExtendedMessageFormat.appendQuotedString(ExtendedMessageFormat.java:422)
	at org.apache.commons.lang.text.ExtendedMessageFormat.applyPattern(ExtendedMessageFormat.java:158)
	at org.apache.commons.lang.text.ExtendedMessageFormat.<init>(ExtendedMessageFormat.java:127)
	at org.apache.commons.lang.text.ExtendedMessageFormat.<init>(ExtendedMessageFormat.java:112)
	at org.apache.commons.lang.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477(ExtendedMessageFormatTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at com.gzoltar.lib.instrumentation.testing.junit.a.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testEscapedQuote_LANG_477
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testExtendedFormats
* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testExtendedFormats
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testExtendedAndBuiltInFormats
* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testExtendedAndBuiltInFormats
* Started org.apache.commons.lang.text.ExtendedMessageFormatTest#testBuiltInNumberFormat
* Finished org.apache.commons.lang.text.ExtendedMessageFormatTest#testBuiltInNumberFormat
* Filtering test cases that do not cover any component
* Sending data to master
* Closing connection with client
* Performing fault localization
* Running Ochiai
* Running Ochiai2
* Running Tarantula
* Running Jaccard
* Running SBI
* Running Kulczynski2
* Running Sorensen-Dice
* Running Anderberg
* Running Simple-matching
* Running Rogers and Tanimoto
* Running Russel and Rao
* Running Dstar
* Running Opt
* Running Barinel
* Running Ideal
* Running Naish1
* Writing coverage matrix to '/fastdata/acp13jcd/GZoltar/Lang/43/Lang/developer/0/Lang-43b-developer.0/matrix'
* Normalizing spectra, coefficient: DSTAR
* Normalizing spectra, coefficient: OPT
* Writing spectra to '/fastdata/acp13jcd/GZoltar/Lang/43/Lang/developer/0/Lang-43b-developer.0/spectra'
* Metrics
* Writing statistics to '/fastdata/acp13jcd/GZoltar/Lang/43/Lang/developer/0/Lang-43b-developer.0/statistics.csv'
* Computation finished

DONE!
